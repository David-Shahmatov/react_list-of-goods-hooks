{"version":3,"sources":["App.tsx","index.tsx"],"names":["SortType","goodsFromServer","App","useState","NONE","sortType","setSortType","isReversed","setReversed","goods","visibleGoods","sort","good1","good2","LENGTH","length","ALPHABET","localeCompare","reverse","getReorderedGoods","className","type","classNames","onClick","map","good","ReactDOM","render","document","getElementById"],"mappings":"6KAkBKA,E,0EAbQC,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,W,SAGGD,O,eAAAA,I,uBAAAA,I,oBAAAA,M,KAqCE,IAAME,EAAgB,WAC3B,MAAgCC,mBAASH,EAASI,MAAlD,mBAAOC,EAAP,KAAiBC,EAAjB,KACA,EAAkCH,oBAAS,GAA3C,mBAAOI,EAAP,KAAmBC,EAAnB,KAmBMC,EA/CD,SACLA,EADK,GAGJ,IADCJ,EACF,EADEA,SAAUE,EACZ,EADYA,WAENG,EAAY,YAAOD,GAmBzB,OAjBAC,EAAaC,MAAK,SAACC,EAAOC,GACxB,OAAQR,GACN,KAAML,EAASc,OACb,OAAOF,EAAMG,OAASF,EAAME,OAE9B,KAAMf,EAASgB,SACb,OAAOJ,EAAMK,cAAcJ,GAE7B,QACE,OAAO,MAITN,GACFG,EAAaQ,UAGRR,EAwBOS,CAAkBlB,EAAiB,CAAEM,aAAYF,aAE/D,OACE,sBAAKe,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,KAAK,SACLD,UAAWE,IACT,iBACA,CAAE,WAAYjB,IAAaL,EAASgB,WAEtCO,QAxBe,WACrBjB,EAAYN,EAASgB,WAiBjB,iCAWA,wBACEK,KAAK,SACLD,UAAWE,IACT,oBACA,CAAE,WAAYjB,IAAaL,EAASc,SAEtCS,QA/Ba,WACnBjB,EAAYN,EAASc,SAwBjB,4BAWA,wBACEO,KAAK,SACLD,UAAWE,IACT,oBACA,CAAE,YAA2B,IAAff,IAEhBgB,QAlDQ,WACdf,GAAaD,IA2CT,sBAWEF,IAAaL,EAASI,OAAuB,IAAfG,IAE5B,wBACEc,KAAK,SACLD,UAAU,4BACVG,QAhDE,WACZjB,EAAYN,EAASI,MACrBI,GAAY,IA2CJ,sBAUN,6BACE,6BACGC,EAAMe,KAAI,SAAAC,GAAI,OACb,oBAAe,UAAQ,OAAvB,SACGA,GADMA,cC9HrBC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.64b35768.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport './App.scss';\nimport classNames from 'classnames';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nenum SortType {\n  NONE,\n  ALPHABET,\n  LENGTH,\n}\n\ntype ReorderOptions = {\n  sortType: SortType,\n  isReversed: boolean,\n};\n\nexport function getReorderedGoods(\n  goods: string[],\n  { sortType, isReversed }: ReorderOptions,\n) {\n  const visibleGoods = [...goods];\n\n  visibleGoods.sort((good1, good2) => {\n    switch (sortType) {\n      case (SortType.LENGTH):\n        return good1.length - good2.length;\n\n      case (SortType.ALPHABET):\n        return good1.localeCompare(good2);\n\n      default:\n        return 0;\n    }\n  });\n\n  if (isReversed) {\n    visibleGoods.reverse();\n  }\n\n  return visibleGoods;\n}\n\nexport const App: React.FC = () => {\n  const [sortType, setSortType] = useState(SortType.NONE);\n  const [isReversed, setReversed] = useState(false);\n\n  const reverse = () => {\n    setReversed(!isReversed);\n  };\n\n  const sortByAlphabet = () => {\n    setSortType(SortType.ALPHABET);\n  };\n\n  const sortByLength = () => {\n    setSortType(SortType.LENGTH);\n  };\n\n  const reset = () => {\n    setSortType(SortType.NONE);\n    setReversed(false);\n  };\n\n  const goods = getReorderedGoods(goodsFromServer, { isReversed, sortType });\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          type=\"button\"\n          className={classNames(\n            'button is-info',\n            { 'is-light': sortType !== SortType.ALPHABET },\n          )}\n          onClick={sortByAlphabet}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          type=\"button\"\n          className={classNames(\n            'button is-success',\n            { 'is-light': sortType !== SortType.LENGTH },\n          )}\n          onClick={sortByLength}\n        >\n          Sort by length\n        </button>\n\n        <button\n          type=\"button\"\n          className={classNames(\n            'button is-warning',\n            { 'is-light': isReversed === false },\n          )}\n          onClick={reverse}\n        >\n          Reverse\n        </button>\n\n        {(sortType !== SortType.NONE || isReversed !== false)\n          && (\n            <button\n              type=\"button\"\n              className=\"button is-danger is-light\"\n              onClick={reset}\n            >\n              Reset\n            </button>\n          )}\n      </div>\n\n      <ul>\n        <ul>\n          {goods.map(good => (\n            <li key={good} data-cy=\"Good\">\n              {good}\n            </li>\n          ))}\n        </ul>\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}